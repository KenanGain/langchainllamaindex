// DO NOT EXPOSE THIS VARIABLE TO PUBLIC, IT IS USED INTERNALLY FOR BROWSER ENVIRONMENT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AsyncLocalStorage: function() {
        return AsyncLocalStorage;
    },
    CustomEvent: function() {
        return defaultCustomEvent;
    },
    INTERNAL_ENV: function() {
        return INTERNAL_ENV;
    },
    getEnv: function() {
        return getEnv;
    },
    setEnvs: function() {
        return setEnvs;
    }
});
const INTERNAL_ENV = {};
function setEnvs(envs) {
    Object.assign(INTERNAL_ENV, envs);
}
function getEnv(name) {
    if (INTERNAL_ENV[name]) {
        return INTERNAL_ENV[name];
    }
}
class AsyncLocalStorage {
    #store = null;
    static bind(fn) {
        return fn;
    }
    static snapshot() {
        return (cb, ...args)=>cb(...args);
    }
    getStore() {
        return this.#store;
    }
    run(store, cb) {
        this.#store = store;
        if (cb.constructor.name === "AsyncFunction") {
            console.warn("AsyncLocalStorage is not supported in the web environment");
            console.warn("Please note that some features may not work as expected");
        }
        return cb();
    }
}
const defaultCustomEvent = globalThis.CustomEvent;
