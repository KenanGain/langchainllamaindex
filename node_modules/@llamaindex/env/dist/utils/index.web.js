// DO NOT EXPOSE THIS VARIABLE TO PUBLIC, IT IS USED INTERNALLY FOR BROWSER ENVIRONMENT
export const INTERNAL_ENV = {};
export function setEnvs(envs) {
    Object.assign(INTERNAL_ENV, envs);
}
export function getEnv(name) {
    if (INTERNAL_ENV[name]) {
        return INTERNAL_ENV[name];
    }
}
// Web doesn't have AsyncLocalStorage and there's no alternative way to implement it
// Wait for https://github.com/tc39/proposal-async-context
export class AsyncLocalStorage {
    #store = null;
    static bind(fn) {
        return fn;
    }
    static snapshot() {
        return (cb, ...args)=>cb(...args);
    }
    getStore() {
        return this.#store;
    }
    run(store, cb) {
        this.#store = store;
        if (cb.constructor.name === "AsyncFunction") {
            console.warn("AsyncLocalStorage is not supported in the web environment");
            console.warn("Please note that some features may not work as expected");
        }
        return cb();
    }
}
const defaultCustomEvent = globalThis.CustomEvent;
export { defaultCustomEvent as CustomEvent };
